name: CI Build and Test

on:
    push:
        branches: [ main ]
        paths:
            -   "app/**"
            -   "Dockerfile"
            -   "nginx.conf"
            -   ".github/workflows/ci-build-docker.yml"

    pull_request:
        paths:
            -   "app/**"
            -   "Dockerfile"
            -   "nginx.conf"
            -   ".github/workflows/ci-build-docker.yml"

    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest
        env:
            IMAGE_NAME: portfolio-ci-test
            WEB_ROOT: /usr/share/nginx/html

        steps:
            -   name: Checkout
                uses: actions/checkout@v4

            -   name: Assert 404 in public
                run: |
                    test -f app/public/404.html || { echo "app/public/404.html missing"; exit 1; }

            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v3

            -   name: Build image (no push)
                uses: docker/build-push-action@v6
                with:
                    context: .
                    file: ./Dockerfile
                    load: true
                    tags: ${{ env.IMAGE_NAME }}:ci
                    cache-from: type=gha
                    cache-to: type=gha,mode=max

            -   name: Verify image
                run: |
                    docker run --rm -e WEB_ROOT="${WEB_ROOT}" "$IMAGE_NAME:ci" sh -eu -c '
                    test -f "$WEB_ROOT/index.html"
                    test -f "$WEB_ROOT/404.html"
                    ls "$WEB_ROOT"/assets/*.js >/dev/null 2>&1
                    ls "$WEB_ROOT"/assets/*.css >/dev/null 2>&1 || true
                    test -f /etc/nginx/conf.d/site.conf
                    '

            -   name: Nginx syntax check
                run: |
                    docker run --rm "$IMAGE_NAME:ci" nginx -t

            -   name: Verify container runs and serves
                run: |
                    set -euo pipefail

                    cid=$(docker run -d -p 8080:80 "$IMAGE_NAME:ci")
                    echo "CID=$cid" >> "$GITHUB_ENV"

                    for i in $(seq 1 30); do
                    status=$(docker inspect -f '{{.State.Status}}' "$cid" 2>/dev/null || echo "exited")
                    [ "$status" = "running" ] && break
                    sleep 0.5
                    done
                    test "$(docker inspect -f '{{.State.Status}}' "$cid")" = "running"

                    if docker logs "$cid" 2>&1 | grep -Eiq 'emerg|alert|crit|error'; then
                    echo "❌ Nginx startup errors:"; docker logs "$cid"; exit 1; fi

                    echo "== Health check =="
                    code_health=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/healthz || true)
                    if [ "$code_health" != "200" ]; then
                    echo "No /healthz (got $code_health). Falling back to / ..."
                    code_root=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/ || true)
                    [ "$code_root" = "200" ] || { echo "❌ / not 200 (got $code_root)"; exit 1; }
                    fi

                    echo "== GET / =="
                    code=$(curl -s -o /tmp/home.html -w "%{http_code}" http://localhost:8080/)
                    echo "Status /: $code"
                    [ "$code" = "200" ] || { echo "❌ Expected 200 for /"; sed -n '1,120p' /tmp/home.html; exit 1; }
                    grep -Eiq '<div[^>]+id=[\"\x27]root[\"\x27]' /tmp/home.html \
                    || { echo "❌ Missing <div id=\"root\"> in /"; sed -n '1,120p' /tmp/home.html; exit 1; }

                    echo "== GET /this-route-does-not-exist =="
                    code404=$(curl -s -o /tmp/resp404.html -w "%{http_code}" http://localhost:8080/this-route-does-not-exist)
                    echo "Status /this-route-does-not-exist: $code404"
                    [ "$code404" = "404" ] || { echo "❌ Expected 404 (got $code404)"; sed -n '1,120p' /tmp/resp404.html; exit 1; }
                    # body should not be empty
                    [ -s /tmp/resp404.html ] || { echo "❌ 404 body empty"; exit 1; }

            -   name: Clean up container
                if: always()
                run: |
                    if [ -n "${CID:-}" ]; then
                        echo "Stopping container $CID..."
                        docker rm -f "$CID"
                    else
                        echo "No CID found, nothing to clean up."
                    fi
